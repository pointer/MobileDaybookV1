<template>
<f7-page name="duty-taking">
  <f7-navbar title="Prise de service" back-link="Retour" sliding>
<!--  <f7-nav-right>
  </f7-nav-right> -->
  </f7-navbar>
    <f7-block>
        <div class="card">
          <div class="card-header">{{site}}</div>
          <div class="card-content">
            <div class="list media-list">
              <ul>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Usager: {{username}}</div>
                    </div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Date: {{punchDate}}</div>
                    </div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Latitude: {{lat}}</div>
                    </div>
                  </div>
                </li>
                <li class="item-content">
                  <div class="item-inner">
                    <div class="item-title-row">
                      <div class="item-title">Longitude: {{lng}}</div>
                    </div>
                  </div>
                </li>
              </ul>
              <f7-list>
              <f7-list-button  @click="onSend" title="Envoyer"></f7-list-button>
              </f7-list>
            </div>
          </div>
        </div>
    </f7-block>
       </f7-page>

</template>
<script>
 import moment from 'moment'
 export default {
   data () {
     return {
       username: '',
       lat: '',
       lng: '',
       punchDate: '',
       site: '',
       hasPunched: ''
     }
   },
   mounted: function () {
     // console.log(this.$device)
     this.punchIn()
     // this.getCsrfToken()
   },
   methods: {
     onSend: function () {
       const self = this
       let urlToken = 'http://localhost/rest/session/token'
       let uid = window.localStorage.getItem('uid')
       let pass = window.sessionStorage.getItem('password')
       let name = window.localStorage.getItem('username')
       let enc = window.btoa(name + ':' + pass)
       let encString = 'Basic ' + enc
       let urlNode = 'http://localhost/node'
       let newNode = {
         type: {
           target_id: 'daybook_duty_taking'
         },
         title: {
           value: self.site
         },
         field_dbk_duty_taking_agent_id: {
           value: uid
         },
         field_dbk_duty_taking_agent: {
           value: self.username
         },
         field_dbk_duty_taking_start: {
           value: self.punchDate
         },
         field_dbk_duty_taking_end: {
           value: self.punchDate
         },
         field_dbk_duty_taking_geo: {
           field_dbk_duty_taking_geo_lat: {
             value: self.lat
           },
           field_dbk_duty_taking_geo_lng: {
             value: self.lng
           }
         },
         field_dbk_duty_taking_site: {
           value: self.site
         }
       }
       // let urlToken = 'http://localhost/rest/session/token'
       window.fetch(urlToken)
      .then((response) => response.text())
      .then((token) => {
        let fetchData = {
          method: 'POST',
            // dataType: 'hal_json',
            // body: JSON.stringify({name: name, pass: pass}),
            // form_id: 'user_login_form',
          data: JSON.stringify(newNode),
          headers: {
            'Authorization': encString,
            'Content-Type': 'application/hal+json',
            // 'Accept': 'application/hal+json',
            'X-CSRF-Token': token
          }
          // 'mode': 'cors'
            // withCredentials: false
            // credentials: 'include'
        }
          // debugger
        window.fetch(urlNode, fetchData)
          .then((response) => response.json())
          .then((data) => {
            console.log(data)
          })
      })
      .catch(function (error) {
        console.debug(error)
      })
     },
     punchIn: function () {
       const self = this
       self.getCoordinates()
       .then(
          function onCoordinatesResolved (coords) {
            return coords
          },
          function onCoordinatesRejected (err) {
            console.warn('failed to obtain coordinates - ', err)
            return { lat: null, long: null }
          }
        )
       .then(function loadData (coords) {
         self.showData(coords)
       })
       .catch(function (err) {
         console.error('error: ', err)
       })
     },
     getCoordinates: function () {
       return new Promise(function (resolve, reject) {
         if (
           !('geolocation' in navigator) ||
           !('getCurrentPosition' in navigator.geolocation)
         ) {
           return Promise.reject(new Error('geolocation API not available'))
         }
         let options = {
           timeout: 10000
         }
       // browser prompts for permission
         navigator.geolocation.getCurrentPosition(
          getPositionCallBack,
          reject,
          options
        )
         function getPositionCallBack (position) {
           let coords = ''
           try {
             coords = {
               lat: position.coords.latitude,
               lng: position.coords.longitude
             }
           } catch (err) {
             return reject(err)
           }
           return resolve(coords)
         }
       })
     },
     punchOut: function () {},
     showData: function (coords) {
       const self = this
       self.punchDate = new Date()
       self.lat = coords.lat
       self.lng = coords.lng
       let currentDate = moment().startOf('day')
       let todos = JSON.parse(window.sessionStorage.getItem('todos'))
       // console.log(todos)
       for (let todo in todos) {
         if (todos.hasOwnProperty(todo)) {
           // console.log(todos[todo].activity_site)
           let startDate = moment(todos[todo].activity_start_date, 'YYYY-MM-DD')
           let duration = moment.duration(startDate.diff(currentDate)).asDays()
           // debugger
           if (duration === 0) {
             self.site = todos[todo].activity_site
           }
         }
       }
       self.username = window.localStorage.getItem('username')
     },
     punchStatus: function () {
       this.hasPunched = window.sessionStorage.getItem('hasPunched')
       return this.hasPunched
     },
     getCsrfToken: function () {
       const self = this
       window.fetch('http://localhost/rest/session/token')
       .then(function (response) {
         if (!response.ok) {
           throw Error(response.statusText)
         }
       // Read the response as json.
         return response.text()
       })
        .then((data) => {
          // debugger
          let token = data
          window.sessionStorage.setItem('csrfToken', data)
          console.log(token)
          // return data
        })
        .then((data) => {
          // debugger
          self.onSend()
        })
       .catch(function (error) {
         console.debug(error)
       })
     }
   }
 }
</script>
